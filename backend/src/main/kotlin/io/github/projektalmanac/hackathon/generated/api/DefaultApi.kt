/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (7.7.0).
 * https://openapi-generator.tech
 * Do not edit the class manually.
*/
package io.github.projektalmanac.hackathon.generated.api

import io.github.projektalmanac.hackathon.generated.dto.PatchUsersUserIdRequestDto
import io.github.projektalmanac.hackathon.generated.dto.PostUserRequestDto
import io.github.projektalmanac.hackathon.generated.dto.UserDto
import io.swagger.v3.oas.annotations.*
import io.swagger.v3.oas.annotations.enums.*
import io.swagger.v3.oas.annotations.media.*
import io.swagger.v3.oas.annotations.responses.*
import io.swagger.v3.oas.annotations.security.*
import org.springframework.http.HttpStatus
import org.springframework.http.MediaType
import org.springframework.http.ResponseEntity

import org.springframework.web.bind.annotation.*
import org.springframework.validation.annotation.Validated
import org.springframework.web.context.request.NativeWebRequest
import org.springframework.beans.factory.annotation.Autowired

import javax.validation.constraints.DecimalMax
import javax.validation.constraints.DecimalMin
import javax.validation.constraints.Email
import javax.validation.constraints.Max
import javax.validation.constraints.Min
import javax.validation.constraints.NotNull
import javax.validation.constraints.Pattern
import javax.validation.constraints.Size
import javax.validation.Valid

import kotlin.collections.List
import kotlin.collections.Map

@Validated
interface DefaultApi {

    @Operation(
        tags = ["default",],
        summary = "Get User Info by User ID",
        operationId = "getUsersUserId",
        description = """Retrieve the information of the user with the matching user ID.""",
        responses = [
            ApiResponse(responseCode = "200", description = "User Found", content = [Content(schema = Schema(implementation = UserDto::class))]),
            ApiResponse(responseCode = "404", description = "User Not Found")
        ]
    )
    @RequestMapping(
            method = [RequestMethod.GET],
            value = ["/users/{userId}"],
            produces = ["application/json"]
    )
    fun getUsersUserId(@Parameter(description = "Id of an existing user.", required = true) @PathVariable("userId") userId: kotlin.Int): ResponseEntity<UserDto>

    @Operation(
        tags = ["default",],
        summary = "Update User Information",
        operationId = "patchUsersUserId",
        description = """Update the information of an existing user.""",
        responses = [
            ApiResponse(responseCode = "200", description = "User Updated", content = [Content(schema = Schema(implementation = UserDto::class))]),
            ApiResponse(responseCode = "404", description = "User Not Found"),
            ApiResponse(responseCode = "409", description = "Email Already Taken")
        ]
    )
    @RequestMapping(
            method = [RequestMethod.PATCH],
            value = ["/users/{userId}"],
            produces = ["application/json"],
            consumes = ["application/json"]
    )
    fun patchUsersUserId(@Parameter(description = "Id of an existing user.", required = true) @PathVariable("userId") userId: kotlin.Int,@Parameter(description = "Patch user properties to update.") @Valid @RequestBody(required = false) patchUsersUserIdRequestDto: PatchUsersUserIdRequestDto?): ResponseEntity<UserDto>

    @Operation(
        tags = ["default",],
        summary = "Create New User",
        operationId = "postUser",
        description = """Create a new user.""",
        responses = [
            ApiResponse(responseCode = "200", description = "User Created", content = [Content(schema = Schema(implementation = UserDto::class))]),
            ApiResponse(responseCode = "400", description = "Missing Required Information"),
            ApiResponse(responseCode = "409", description = "Email Already Taken")
        ]
    )
    @RequestMapping(
            method = [RequestMethod.POST],
            value = ["/user"],
            produces = ["application/json"],
            consumes = ["application/json"]
    )
    fun postUser(@Parameter(description = "Post the necessary fields for the API to create a new user.") @Valid @RequestBody(required = false) postUserRequestDto: PostUserRequestDto?): ResponseEntity<UserDto>
}
