/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (7.7.0).
 * https://openapi-generator.tech
 * Do not edit the class manually.
*/
package io.github.projektalmanac.imani.generated.api

import io.github.projektalmanac.imani.generated.dto.FarmaceuticoDto
import io.github.projektalmanac.imani.generated.dto.NuevoFarmaceuticoDto
import io.github.projektalmanac.imani.generated.dto.ProblemDetailsDto
import io.swagger.v3.oas.annotations.*
import io.swagger.v3.oas.annotations.enums.*
import io.swagger.v3.oas.annotations.media.*
import io.swagger.v3.oas.annotations.responses.*
import io.swagger.v3.oas.annotations.security.*
import org.springframework.http.HttpStatus
import org.springframework.http.MediaType
import org.springframework.http.ResponseEntity

import org.springframework.web.bind.annotation.*
import org.springframework.validation.annotation.Validated
import org.springframework.web.context.request.NativeWebRequest
import org.springframework.beans.factory.annotation.Autowired

import javax.validation.constraints.DecimalMax
import javax.validation.constraints.DecimalMin
import javax.validation.constraints.Email
import javax.validation.constraints.Max
import javax.validation.constraints.Min
import javax.validation.constraints.NotNull
import javax.validation.constraints.Pattern
import javax.validation.constraints.Size
import javax.validation.Valid

import kotlin.collections.List
import kotlin.collections.Map

@Validated
interface FarmaceuticoApi {

    @Operation(
        tags = ["farmaceutico",],
        summary = "Obten Farmaceutico",
        operationId = "getFarmaceutico",
        description = """""",
        responses = [
            ApiResponse(responseCode = "200", description = "OK", content = [Content(schema = Schema(implementation = FarmaceuticoDto::class))]),
            ApiResponse(responseCode = "404", description = "Not Found", content = [Content(schema = Schema(implementation = ProblemDetailsDto::class))])
        ]
    )
    @RequestMapping(
            method = [RequestMethod.GET],
            value = ["/farmaceutico/{farmaceuticoId}"],
            produces = ["application/json"]
    )
    fun getFarmaceutico(@Parameter(description = "", required = true) @PathVariable("farmaceuticoId") farmaceuticoId: kotlin.Int): ResponseEntity<FarmaceuticoDto>

    @Operation(
        tags = ["farmaceutico",],
        summary = "Crear un farmaceutico",
        operationId = "postFarmaceutico",
        description = """""",
        responses = [
            ApiResponse(responseCode = "204", description = "No Content"),
            ApiResponse(responseCode = "400", description = "Bad Request", content = [Content(schema = Schema(implementation = ProblemDetailsDto::class))])
        ]
    )
    @RequestMapping(
            method = [RequestMethod.POST],
            value = ["/farmaceutico"],
            produces = ["application/json"],
            consumes = ["application/json"]
    )
    fun postFarmaceutico(@Parameter(description = "") @Valid @RequestBody(required = false) nuevoFarmaceuticoDto: NuevoFarmaceuticoDto?): ResponseEntity<Unit>

    @Operation(
        tags = ["farmaceutico",],
        summary = "Actualiza Farmaceutico",
        operationId = "putFarmaceuticoFarmaceuticoId",
        description = """""",
        responses = [
            ApiResponse(responseCode = "204", description = "No Content"),
            ApiResponse(responseCode = "404", description = "Not Found", content = [Content(schema = Schema(implementation = ProblemDetailsDto::class))])
        ]
    )
    @RequestMapping(
            method = [RequestMethod.PUT],
            value = ["/farmaceutico/{farmaceuticoId}"],
            produces = ["application/json"],
            consumes = ["application/json"]
    )
    fun putFarmaceuticoFarmaceuticoId(@Parameter(description = "", required = true) @PathVariable("farmaceuticoId") farmaceuticoId: kotlin.Int,@Parameter(description = "") @Valid @RequestBody(required = false) farmaceuticoDto: FarmaceuticoDto?): ResponseEntity<Unit>
}
