/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (7.7.0).
 * https://openapi-generator.tech
 * Do not edit the class manually.
*/
package io.github.projektalmanac.imani.generated.api

import io.github.projektalmanac.imani.generated.dto.PacienteDto
import io.github.projektalmanac.imani.generated.dto.PostPacientesSendQrRequestDto
import io.github.projektalmanac.imani.generated.dto.ProblemDetailsDto
import io.swagger.v3.oas.annotations.*
import io.swagger.v3.oas.annotations.enums.*
import io.swagger.v3.oas.annotations.media.*
import io.swagger.v3.oas.annotations.responses.*
import io.swagger.v3.oas.annotations.security.*
import org.springframework.http.HttpStatus
import org.springframework.http.MediaType
import org.springframework.http.ResponseEntity

import org.springframework.web.bind.annotation.*
import org.springframework.validation.annotation.Validated
import org.springframework.web.context.request.NativeWebRequest
import org.springframework.beans.factory.annotation.Autowired

import javax.validation.constraints.DecimalMax
import javax.validation.constraints.DecimalMin
import javax.validation.constraints.Email
import javax.validation.constraints.Max
import javax.validation.constraints.Min
import javax.validation.constraints.NotNull
import javax.validation.constraints.Pattern
import javax.validation.constraints.Size
import javax.validation.Valid

import kotlin.collections.List
import kotlin.collections.Map

@Validated
interface PacienteApi {

    @Operation(
        tags = ["paciente",],
        summary = "Obtiene la informacion del paciente",
        operationId = "getPacienteID",
        description = """Obtiene la información del paciente 
nombre, estatura, etc""",
        responses = [
            ApiResponse(responseCode = "200", description = "paciente existe", content = [Content(schema = Schema(implementation = PacienteDto::class))]),
            ApiResponse(responseCode = "404", description = "Paciente no existe", content = [Content(schema = Schema(implementation = ProblemDetailsDto::class))])
        ]
    )
    @RequestMapping(
            method = [RequestMethod.GET],
            value = ["/pacientes/{pacienteId}"],
            produces = ["application/json"]
    )
    fun getPacienteID(@Parameter(description = "", required = true) @PathVariable("pacienteId") pacienteId: kotlin.Int): ResponseEntity<PacienteDto>

    @Operation(
        tags = ["paciente",],
        summary = "Obtener pacientes de doctor",
        operationId = "getPacientesDoctorID",
        description = """Recuperar la lista de pacientes de un doctor""",
        responses = [
            ApiResponse(responseCode = "200", description = "OK", content = [Content(array = ArraySchema(schema = Schema(implementation = PacienteDto::class)))]),
            ApiResponse(responseCode = "404", description = "Not Found", content = [Content(schema = Schema(implementation = ProblemDetailsDto::class))])
        ]
    )
    @RequestMapping(
            method = [RequestMethod.GET],
            value = ["/doctores/{doctorId}/pacientes"],
            produces = ["application/json"]
    )
    fun getPacientesDoctorID(@Parameter(description = "", required = true) @PathVariable("doctorId") doctorId: kotlin.Int): ResponseEntity<List<PacienteDto>>

    @Operation(
        tags = ["paciente",],
        summary = "Crea un paciente",
        operationId = "postPacientes",
        description = """Crea un paciente 
nombre estatura, etc""",
        responses = [
            ApiResponse(responseCode = "200", description = "OK", content = [Content(schema = Schema(implementation = PacienteDto::class))])
        ]
    )
    @RequestMapping(
            method = [RequestMethod.POST],
            value = ["/pacientes"],
            produces = ["application/json"],
            consumes = ["application/json"]
    )
    fun postPacientes(@Parameter(description = "") @Valid @RequestBody(required = false) pacienteDto: PacienteDto?): ResponseEntity<PacienteDto>

    @Operation(
        tags = ["paciente",],
        summary = "Envia el QR para iniciar sesión",
        operationId = "postPacientesSendQr",
        description = """""",
        responses = [
            ApiResponse(responseCode = "204", description = "No Content"),
            ApiResponse(responseCode = "400", description = "Error en el envío del QR", content = [Content(schema = Schema(implementation = ProblemDetailsDto::class))])
        ]
    )
    @RequestMapping(
            method = [RequestMethod.POST],
            value = ["/pacientes/{pacienteId}/send-qr"],
            produces = ["application/json"],
            consumes = ["application/json"]
    )
    fun postPacientesSendQr(@Parameter(description = "", required = true) @PathVariable("pacienteId") pacienteId: kotlin.Int,@Parameter(description = "") @Valid @RequestBody(required = false) postPacientesSendQrRequestDto: PostPacientesSendQrRequestDto?): ResponseEntity<Unit>

    @Operation(
        tags = ["paciente",],
        summary = "Actualiza informacion del paciente",
        operationId = "upDatePacienteID",
        description = """Actualiza fecha de nacimiento, nombre, etc""",
        responses = [
            ApiResponse(responseCode = "204", description = "Paciente Creado"),
            ApiResponse(responseCode = "404", description = "No existe el paciente", content = [Content(schema = Schema(implementation = ProblemDetailsDto::class))])
        ]
    )
    @RequestMapping(
            method = [RequestMethod.PUT],
            value = ["/pacientes/{pacienteId}"],
            produces = ["application/json"],
            consumes = ["application/json"]
    )
    fun upDatePacienteID(@Parameter(description = "", required = true) @PathVariable("pacienteId") pacienteId: kotlin.Int,@Parameter(description = "Patch user properties to update.") @Valid @RequestBody(required = false) pacienteDto: PacienteDto?): ResponseEntity<Unit>
}
